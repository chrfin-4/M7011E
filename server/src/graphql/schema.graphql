type Query {
  online: [User!]!
  users: [User!]!
  user(id: ID!): User

  me: User
}

type Mutation {
  createUser(userInput: UserInput): UserResponse!
  updateUser(userId: String!, userInput: UserInput): UserResponse!
  deleteUser(userId: String!): Boolean
  login(email: String!, password: String!): UserResponse!
  logout: Boolean

  assignProsumer(prosumerId: Int!): Boolean
  unassignProsumer: Boolean
}

type FieldError {
  field: String!
  message: String!
}

type User {
  _id: ID
  name: String!
  email: String!
  password: String
  type: Int!
  prosumerData: ProsumerData
  managerData: ManagerData
}

type UserResponse {
  errors: [FieldError]
  user: User
}

type ProsumerData {
  banned: Boolean!
  houseId: Int
}

type ManagerData {
  powerplants: [Powerplant!]
}

type Powerplant {
  powerplantId: String!
  name: String!
}

input UserInput {
  name: String!
  email: String!
  password: String!
  type: String!
  prosumerData: ProsumerInput
  managerData: PowerplantInput
}

input ProsumerInput {
  banned: Boolean
  houseId: Int!
}

input PowerplantInput {
  powerplandId: String!
  name: String!
}
